[{"/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/index.js":"1","/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/App.js":"2","/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/reportWebVitals.js":"3","/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/WeatherApp.js":"4","/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/WeatherIcon.js":"5"},{"size":500,"mtime":1609987384694,"results":"6","hashOfConfig":"7"},{"size":114,"mtime":1609988030156,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609986592050,"results":"9","hashOfConfig":"7"},{"size":5746,"mtime":1610089483092,"results":"10","hashOfConfig":"7"},{"size":3169,"mtime":1610090283856,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"11ry5rx",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/index.js",[],["24","25"],"/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/App.js",[],"/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/reportWebVitals.js",[],"/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/WeatherApp.js",["26"],"import React, { useState, useEffect, useCallback } from 'react'\nimport styled from '@emotion/styled'\nimport WeatherIcon from './WeatherIcon'\nimport { ReactComponent as AirFlowIcon } from './images/airFlow.svg'\nimport { ReactComponent as RainIcon } from './images/rain.svg'\nimport { ReactComponent as RedoIcon } from './images/refresh.svg'\n\n// CSS in JS\nconst Container = styled.div`\n  background-color: #ededed;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\nconst WeatherCard = styled.div`\n  position: relative;\n  min-width: 360px;\n  box-shadow: 0 1px 3px 0 #999999;\n  background-color: #f9f9f9;\n  box-sizing: border-box;\n  padding: 30px 15px;\n`\nconst Location = styled.div`\n  font-size: 28px;\n  color: #212121;\n  margin-bottom: 20px;\n`\nconst Description = styled.div`\n  font-size: 16px;\n  color: #828282;\n  margin-bottom: 30px;\n`\nconst CurrentWeather = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n`\nconst Temperature = styled.div`\n  color: #757575;\n  font-size: 96px;\n  font-weight: 300;\n  display: flex;\n`\nconst Celsius = styled.div`\n  font-weight: normal;\n  font-size: 42px;\n`\nconst Airflow = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 300;\n  color: #828282;\n  margin-bottom: 20px;\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`\nconst Rain = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 300;\n  color: #828282;\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`\nconst Redo = styled.div`\n  position: absolute;\n  right: 15px;\n  bottom: 15px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: flex-end;\n  color: #828282;\n\n  svg {\n    margin-left: 10px;\n    width: 15px;\n    height: 15px;\n    cursor: pointer;\n  }\n`\n\n\nconst WeatherApp = () => {\n  console.log('invoke function component: WeatherApp')\n  const [weatherElement, setWeatherElement] = useState({\n    observationTime: new Date(),\n    locationName: '',\n    description: '',\n    temperature: 0,\n    windSpeed: 0,\n    humid: 0,\n    weatherCode: 0,\n    rainPossibility: 0,\n    comfortability: '',\n  })\n  // console.log(weatherElement)\n  const { observationTime, locationName, description, temperature, windSpeed, humid, weatherCode, rainPossibility, comfortability } = weatherElement\n\n  const fetchData = useCallback( // useCallback is to reserve function.\n    () => {\n      const fetchingData = async () => {\n        const [currentWeather, weatherForecast] = await Promise.all([fetchCurrentWeather(), fetchWeatherForecast()])\n        setWeatherElement({\n          ...currentWeather,\n          ...weatherForecast\n        })\n      }\n      fetchingData()\n    }, [])\n\n  useEffect(() => {\n    console.log('execute function in useEffect: WeatherApp')\n    fetchData()\n  }, [fetchData])\n\n\n  const fetchCurrentWeather = () => {\n    return fetch('https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=CWB-0DF52233-79B4-4659-A2EA-FD8F74BAF57E&locationName=臺北')\n      .then(res => res.json())\n      .then(data => {\n        const locationData = data.records.location[0]\n        const weatherElements = locationData.weatherElement.reduce((neededElements, item) => {\n          if (item.elementName === 'WDSD' || item.elementName === 'TEMP' || item.elementName === 'HUMD') {\n            neededElements[item.elementName] = item.elementValue\n          }\n          return neededElements\n        }, {})\n\n        return {\n          observationTime: locationData.time.obsTime,\n          locationName: locationData.locationName,\n          temperature: weatherElements.TEMP,\n          windSpeed: weatherElements.WDSD,\n          humid: weatherElements.HUMD\n        }\n\n      })\n      .catch(err => console.log(err.message))\n  }\n\n  const fetchWeatherForecast = () => {\n    return fetch('https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=CWB-0DF52233-79B4-4659-A2EA-FD8F74BAF57E&locationName=臺北市')\n      .then(res => res.json())\n      .then((data) => {\n        const locationData = data.records.location[0];\n        const weatherElements = locationData.weatherElement.reduce(\n          (neededElements, item) => {\n            if (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\n              neededElements[item.elementName] = item.time[0].parameter;\n            }\n            return neededElements;\n          },\n          {}\n        );\n\n        return {\n          description: weatherElements.Wx.parameterName,\n          weatherCode: weatherElements.Wx.parameterValue,\n          rainPossibility: weatherElements.PoP.parameterName,\n          comfortability: weatherElements.CI.parameterName,\n        }\n      })\n  }\n\n  return (\n    <Container>\n      {console.log('render: WeatherApp')}\n      <WeatherCard>\n        <Location>{locationName}</Location>\n        <Description>\n          {description}\n          {comfortability}\n        </Description>\n        <CurrentWeather>\n          <Temperature>\n            {Math.round(temperature)} <Celsius>°C</Celsius>\n          </Temperature>\n          <WeatherIcon currentWeatherCode={weatherCode} moment=\"night\" />\n        </CurrentWeather>\n        <Airflow>\n          <AirFlowIcon />\n          {windSpeed} m/h\n        </Airflow>\n        <Rain>\n          <RainIcon />\n          {Math.round(rainPossibility)} %\n        </Rain>\n        <Redo onClick={fetchData}>\n          最後觀測時間：\n          {\n            new Intl\n              .DateTimeFormat('zh-TW', { hour: 'numeric', minute: 'numeric' })\n              .format(new Date(observationTime))\n          }\n          <RedoIcon />\n        </Redo>\n      </WeatherCard>\n    </Container>\n  )\n}\n\nexport default WeatherApp\n","/Users/Johnny/Desktop/front-and-back/realtime-weather-app/src/WeatherIcon.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":107,"column":79,"nodeType":"33","messageId":"34","endLine":107,"endColumn":84},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'humid' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]